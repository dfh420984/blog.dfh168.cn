<?php

namespace App\HttpController;

use duncan3dc\Laravel\BladeInstance;
use EasySwoole\EasySwoole\Config;
use EasySwoole\Http\AbstractInterface\Controller;

/**
 * 视图控制器
 * Class ViewController
 * @author  : evalor <master@evalor.cn>
 * @package App
 */
abstract class Base extends Controller
{
    protected $view;
    protected $session_login_key;
    protected $admin_info;
    protected $ignoreLogin = ['login'];

    public function index()
    {
        // TODO: Implement index() method.
    }

    public function onRequest(?string $action): ?bool
    {
        $tempPath = Config::getInstance()->getConf('TEMP_DIR');    # 临时文件目录
        $this->view = new BladeInstance(EASYSWOOLE_ROOT . '/Views', "{$tempPath}/templates_c");

        $sessionConfig = Config::getInstance()->getConf('session');
        $this->session_login_key = $sessionConfig['session_login_key'];
        $redisSessObj = \App\HttpController\Utility\RedisSession::getInstance();
        $SessObj = $this->session($redisSessObj);
        \EasySwoole\Component\Context::getInstance()->set('SessObj',$SessObj);
        $SessObj =  \EasySwoole\Component\Context::getInstance()->get('SessObj');
        $SessObj->start();
        if ($SessObj->exist($this->session_login_key)) {
            $this->admin_info = json_decode($SessObj->get($this->session_login_key), true);
        } else {
            if (!in_array($action, $this->ignoreLogin)) {
                $this->writeJson(\EasySwoole\Http\Message\Status::CODE_FORBIDDEN,'请先登录','');
                //$this->response()->redirect('/admin/login.html'); //跳转至登录页
                return false;
            }
        }
        return parent::onRequest($action); // TODO: Change the autogenerated stub
    }

    public function afterAction(?string $actionName): void
    {
        $this->view = null;
        parent::afterAction($actionName); // TODO: Change the autogenerated stub
    }

    /**
     * 输出模板到页面
     * @param string $view
     * @param array $params
     * @author : evalor <master@evalor.cn>
     */
    public function render(string $view, array $params = [])
    {
        $content = $this->view->render($view, $params);
        $this->response()->write($content);
    }

    public function writeJson($code = 200, $msg = null, $data = null)
    {
        if (!$this->response()->isEndResponse()) {
            $data = Array(
                "code" => $code,
                "msg" => $msg,
                "data" => $data
            );
            $this->response()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
            $this->response()->withHeader('Content-type', 'application/json;charset=utf-8');
            $this->response()->withStatus($code);
            return true;
        } else {
            return false;
        }
    }

    /**
     * @param \Throwable $throwable
     * 输出异常信息
     */
    public function onException(\Throwable $throwable): void
    {
        $this->writeJson(400,
            "File:" . $throwable->getFile() . " Line:" . $throwable->getLine() . " msg:" . $throwable->getMessage(),
            $throwable->getTrace()); // TODO: Change the autogenerated stub
    }
}