<?php
/**
 * Created by PhpStorm.
 * User: duanfuhao
 * Date: 2018/12/25
 * Time: 18:01
 * 帖子相关操作
 **/

namespace App\HttpController\Admin;

use App\HttpController\Base;
use App\Model\Admin\IndexModel;
use App\Model\Admin\PostModel;
use EasySwoole\Validate\Validate;

class Posts extends Base
{

    public $postObj = null;
    public $valitor = null;

    public function __construct()
    {
        parent::__construct();
        $this->postObj = new  PostModel();
        $this->valitor = new Validate();
    }

    /**
     * 帖子列表页数据接口
     * Index constructor.
     */
    public function index()
    {
        $model = new IndexModel();
        $data = $model->index();
        return $this->writeJson($data["code"], $data["msg"], $data["data"]);
    }

    /**
     * 帖子添加,编辑页面数据接口
     * 通过反射给类实例属性赋值
     */
    public function postAddEdit()
    {
        $posts_array = $this->request()->getRequestParam();
        $posts_array = $this->purifierHtml($posts_array);
        if (!$this->checkPost($posts_array)) {
            return $this->writeJson(1, 'fail', $this->valitor->getError()->__toString());
        }
        $this->postObj->getRelectObj($this->postObj, $posts_array);
        $data = $this->postObj->toArray(null, PostModel::FILTER_NOT_NULL);//转为数组并过滤掉null值
        if (!empty($data['id'])) {
            $res = $this->postObj->postEdit($data);
        } else {
            $res = $this->postObj->postAdd($data);
        }
        if (!empty($res)) {
            return $this->writeJson(0, 'ok', $res);
        } else {
            return $this->writeJson(1, '操作数据库失败', '');
        }
    }

    /**
     * @param $data
     * 添加帖子验证规则
     */
    public function checkPost($data)
    {
        if (!empty($data['id'])) {
            $this->valitor->addColumn('id')->required('id不能为空')->integer('id必须为整型')->min(0, 'id必须大于0');
        }
        $this->valitor->addColumn('user_id')->required('user_id不能为空')->integer('user_id必须为整型')->min(0, 'user_id必须大于0');
        $this->valitor->addColumn('title')->required('title必填')->betweenLen(1, 100, 'title需1-100字符之间');
        $this->valitor->addColumn('content')->required('content不能为空');
        return $this->valitor->validate($data);
    }

    /**
     * 过滤字符串
     */
    public function purifierHtml($data) {
        $config = \HTMLPurifier_Config::createDefault();
        $purifier = new \HTMLPurifier($config);
        foreach ($data as $key => $val) {
            if (!is_numeric($val)) {
                $data[$key] = $purifier->purify($val);
            }
        }
        return $data;
    }

    public function afterAction(?string $actionName): void
    {
        $this->postObj = null;
        $this->valitor = null;
        parent::afterAction($actionName); // TODO: Change the autogenerated stub
    }

}