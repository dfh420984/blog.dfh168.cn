<?php
/**
 * Created by PhpStorm.
 * User: duanfuhao
 * Date: 2018/12/25
 * Time: 18:01
 * 帖子相关操作
 **/

namespace App\HttpController\Admin;

use App\HttpController\Base;
use App\Model\Admin\PostModel;
use EasySwoole\Validate\Validate;

class Posts extends Base
{

    public $postObj = null;
    public $valitor = null;
    public $pagesize = 20;
    public $maxpageno = 7; //页面最多显示页码数
    public $url = "?page=";

    public function onRequest(?string $action): ?bool
    {
        if (!parent::onRequest($action)) {
            return false;
        }
        $this->postObj = new  PostModel();
        $this->valitor = new Validate();
        return true;
    }

    /**
     * 帖子列表页数据接口
     * Index constructor.
     */
    public function index()
    {
        $return = [
            'data' => [],
            'total' => 0
        ];
        $data = $this->searchWhere();
        $data['page'] = $this->request()->getRequestParam("page") ?? 1;
        $data['size'] = $this->pagesize;
        $res = $this->postObj->postList($data);
        if (!empty($res)) {
            //获取总数
            $data["count"] = 1;
            $total = $this->postObj->postList($data);
            //$pageObj = new \App\HttpController\Utility\PageEllipsis($total, $this->pagesize, $this->url, $this->maxpageno = 7);
            //$pageStr = $pageObj->pagelist($data['page']);
            $return['data'] = $res;
            $return['total'] = ceil($total[0]['total'] / $this->pagesize); //总页数
        }
        if (!empty($res)) {
            return $this->writeJson(0, 'ok', $return);
        } else {
            return $this->writeJson(1, '获取数据失败', '');
        }
    }

    public function searchWhere()
    {
        return $data = $this->request()->getRequestParam("id", "cat_id", "status");
    }

    /**
     * 获取帖子分类接口
     */
    public function getPostsStatus()
    {
        $return = ['草稿', '已发布'];
        return $this->writeJson(0, 'ok', $return);
    }

    /**
     * 帖子添加,编辑页面数据接口
     * 通过反射给类实例属性赋值
     */
    public function postAddEdit()
    {
        try {
            $posts_array = $this->request()->getRequestParam();
            $comObj = new \App\HttpController\Utility\Commen();
            $posts_array = $comObj->purifierHtml($posts_array);
//            $posts_array = array_map(function ($val) { //过滤特殊字符
//                if (!empty($val)) {
//                    return htmlspecialchars($val);
//                }
//            }, $posts_array);
            if (!$this->checkPost($posts_array)) {
                return $this->writeJson(1, $this->valitor->getError()->__toString(), '');
            }
            $this->postObj->getRelectObj($this->postObj, $posts_array);
            $data = $this->postObj->toArray(null, PostModel::FILTER_NOT_NULL);//转为数组并过滤掉null值
            if (!empty($data['id'])) {
                $res = $this->postObj->postEdit($data);
            } else {
                $res = $this->postObj->postAdd($data);
            }
            if (!empty($res)) {
                return $this->writeJson(0, 'ok', $res);
            } else {
                return $this->writeJson(1, '操作数据库失败', '');
            }
        } catch (\Throwable $throwable) {
            return $this->writeJson(1, '程序异常', $throwable->getMessage());
        }
    }

    /**
     * 删除帖子接口
     */
    public function postDel()
    {
        $id = $this->request()->getRequestParam("id");
        if (empty($id)) {
            return $this->writeJson(1, 'id不能为空', '');
        }
        $res = $this->postObj->postDel($id);
        if (!empty($res)) {
            return $this->writeJson(0, '删除帖子成功', '');
        } else {
            return $this->writeJson(1, '删除帖子失败', '');
        }
    }

    /**
     * @param $data
     * 添加帖子验证规则 dfh
     */
    public function checkPost($data)
    {
        if (!empty($data['id'])) {
            $this->valitor->addColumn('id')->required('id不能为空')->integer('id必须为整型')->min(0, 'id必须大于0');
        }
        $this->valitor->addColumn('admin_id')->required('admin_id不能为空')->integer('admin_id必须为整型')->min(0,
            'admin_id必须大于0');
        $this->valitor->addColumn('title')->required('title必填')->betweenLen(1, 100, 'title需1-100字符之间');
        $this->valitor->addColumn('content')->required('content不能为空');
        return $this->valitor->validate($data);
    }


    public function afterAction(?string $actionName): void
    {
        $this->postObj = null;
        $this->valitor = null;
        parent::afterAction($actionName); // TODO: Change the autogenerated stub
    }

}